* package.json
    1. package.json의 속성들 
        1) scripts: npm 명령어를 저장해두는 부분 
            + scripts에 저장된 npm 명령어 사용법 
                ▷ npm run [scripts에 포함된 명령어]
                    - test 나 start 같은 명령어들은 run을 붙이지 않아도 됨.
        2) dependencies: 현 npm에 설치된 패키지들
        3) devDependencies: 배포시에는 사용되지 않고 개발 중에만 사용되는 패키지들.


* npm 관련
    1. --save 옵션
        + dependencies에 패키지 이름을 추가하는 옵션이지만, 
          npm@5부터는 기본값으로 설정되어 따로 붙이지 않아도 됨.

    2. 여러 패키지 설치하기
        ▷ npm install [패키지명] [...]
            > ex) npm install morgan cookie-parser express-session

    3. 개발용 패키지 설치
        + 실제 배포 시에는 사용되지 않고, 개발 중에만 사용되는 패키지들.
        ▷ npm install --save-dev [패키지명] [...]
        ▷ npm install --D [패키지명] [...]
            > ex) npm install --save-dev nodemon

    4. 전역 패키지 설치 (package.json에는 기록되지 않음.)
        + 패키지를 현재 폴더의 node-modules에 설치하는게 아니라 npm이 설치되어 있는 폴더에 설치 
        + 이 폴더의 경로는 보통 시스템 환경 변수에 등록되어 있으므로 전역 설치한 패키지는 콘솔 커맨드로 사용 가능.                  
        ▷ npm install --global [패키지명] [...]
        ▷ npm install --G [패키지명] [...]
            > ex) npm install --global rimraf
    
    5. npm에 등록되지 않은 패키지 설치법 (오픈소스가 아니거나 개발중인 패키지들)
        ▷ npm install [저장소 주소]

    ETC. 
        1) 패키지들
            - nodemon: 소스코드가 바뀔 때마다 자동으로 노드를 재실행해주는 패키지
            - rimraf: 리눅스나 macOS의 rm -rf 명령어를 윈도에서 사용할 수 있게 해주는 패키지
        
        2) 메모
            - node_modules 폴더가 지워져도 package.json이 있으면 npm install만 하면 알아서 다시 설치됨.
                그러므로, node_modules폴더는 Git에도 커밋하지 않음. 
                중요한건 package.json 

        3) npx 명령어 (패키지를 전역 설치한 것과 같은 효과를 얻을 수 있음)        
            [1-1] npm install --save-dev [패키지명] 
            [1-2] npx [패키지명] node_modules


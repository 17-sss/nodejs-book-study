* JWT 토큰으로 인증하기
    +  JWT
        - JWT는 JSON Web Token의 약어
        - JSON 형식의 데이터를 저장하는 토큰
        - JWT의 구성
            1) 헤더(HEADER): 토큰 종류와 해시 알고리즘 정보가 들어 있음
            2) 페이로드(PAYLOAD): 토큰의 내용물이 인코딩된 부분
            3) 시그니처(SIGNATURE): 일련의 문자열로, 시그니처를 통해 토큰이 변조되었는지 여부를 확인할 수 있음.
                > 시그니처는 JWT 비밀키로 만들어짐. 이 비밀키가 노출되면 JWT 토큰을 위조할 수 있으므로 
                    비밀키는 철저히 숨겨야. 시그니처 자체는 숨기지 않아도 됨  
        - JWT의 비밀키는 매우 복잡해 보이지만.. https://jwt.io 등 사이트에서 내용을 쉽게 확인 가능  
        - JWT 토큰을 사용하는 이유: 내용이 들어 있기 때문
        - JWT 토큰은 JWT 비밀키를 알지 않는 이상 변조 불가능.
            > 변조한 토큰은 시그니처를 검사할 때 들통남.
        - 단점: 용량이 크다

    + 프로젝트 파일 작업 순서 및 메모
        1. 콘솔
            > npm i jsonwebtoken            
            +) 다른 사용자가 API를 쓰려면 JWT 토큰을 발급받고 인증받아야함. 
                이 부분은 대부분의 라우터에 공통되므로 미들웨어로 만들어두는 게 좋음
        2. /nodebird-api/.env                     (수정)
        3. /nodebird-api/routes/middlewares.js    (수정)
        4. /nodebird-api/routes/v1.js             (생성)
            1) 라우터 이름은 v1, 버전 1이라는 뜻.
                - 라우터에 버전을 붙인 이유는 한 번 버전이 정해진 후에는 라우터를 함부로 수정하면 안되기 떄문.
                - 다른 사람이 기존 API를 쓰고 있음을 항상 염두해야 함. 
                    (서버의 코드를 바꾸면 API를 사용 중인 다른 사람에게 영향을 미침)
            2) 기존 사용자에게 영향을 미칠 정도로 수정을 해야한다면, 버전을 올린 라우터를 새로 추가하고
                이전 API를 쓰는 사람들에게 새로운 API가 나왔음을 알리는 것이 좋음.
            3) 토큰은 jwt.sign 메서드로 발급
        4. /nodebird-api/app.js             (수정)





//- [11.4] (채팅방 화면 담당 뷰)
extends layout

block content
    h1= title
    a#exit-btn(href='/') 방 나가기
    //- [11.6.1 : 01.] (채팅방에 현재 참여자 수나 목록 표시하기) START
    #number 참여자 수:&nbsp;
        #number-count= number
    //- [11.6.1 : 01.] (채팅방에 현재 참여자 수나 목록 표시하기) END
    fieldset
        legend 채팅 내용
        #chat-list
            //- 채팅 메세지는 세가지로 구분
                1) 메세지(mine)
                2) 시스템 메세지(system)
                3) 남의 메세지(other)
                ==> 메세지 종류에 따라 메세지 디자인이 달라짐
            for chat in chats
                if chat.user === user
                    .mine(style='color:'+chat.user)
                        div= chat.user
                        if chat.gif
                            img(src='/gif/'+chat.gif)
                        else
                            div= chat.chat
                else if chat.user === 'system'
                    .system
                        div= chat.chat
                else
                    .other(style='color:'+chat.user)
                        div= chat.user
                        if chat.gif
                            img(src='/gif/'+chat.gif)
                        else
                            div= chat.chat
    form#chat-form(action='/chat' method='post' enctype='multipart/form-data')
        label(for='gif') GIF 올리기
        input#gif(type='file' name='gif' accept='image/gif')
        input#chat(name='chat')
        button(type='submit') 전송
    
    script(src='/socket.io/socket.io.js')
    script.
        /* 
            여기선 네임스페이스가 /chat     main.pug와는 다름. 
                /room 네임스페이스로 보낸 데이터는 당연히 받을 수 없고
                /chat 네임스페이스로 보낸 데이터만 받을 수 있음
        */
        var socket = io.connect('http://localhost:8005/chat', {
            path: '/socket.io'
        });

        /* 
            join과 exit 이벤트 리스너는 각각 사용자 입장과 퇴장에 
            관한 데이터가 웹 소켓으로 전송될 때 호출 됨        
        */
        socket.on('join', (data) => {
            //- [11.6.1 : 01.] (채팅방에 현재 참여자 수나 목록 표시하기) START ---
            /* 
                [ME MEMO]
                - 이 부분은 socket.js이랑 연결되어있음. 
                    socket.js에서 emit 했기에
                - 여기서 data 변수는 
                    socket.js의 socket.to(roomId).emit('join', {객체}) 에서
                    {객체} 임.
            */
            document.querySelector('#number-count').textContent = data.number;              
            //- [11.6.1 : 01.] (채팅방에 현재 참여자 수나 목록 표시하기) END ---

            var div = document.createElement('div');
            div.classList.add('system');

            var chat = document.createElement('div');
            div.textContent = data.chat;

            div.appendChild(chat);
            document.querySelector('#chat-list').appendChild(div);
        });

        socket.on('exit', (data) => {
            //- [11.6.1 : 01.] (채팅방에 현재 참여자 수나 목록 표시하기)
            document.querySelector('#number-count').textContent = data.number; 
            // --

            var div = document.createElement('div');
            div.classList.add('system');

            var chat = document.createElement('div');
            div.textContent = data.chat;

            div.appendChild(chat);
            document.querySelector('#chat-list').appendChild(div);
        });

        // [11.5 : 01.] (프론트에서는 서버에서 보내는 채팅 데이터를 받을 소켓 이벤트 리스너가 필요함) START        
        socket.on('chat', (data) => {   //- chat은 채팅 메세지가 웹 소켓으로 전송될때 호출
            var div = document.createElement('div');

            if (data.user === '#{user}') {
                div.classList.add('mine');
            } else {
                div.classList.add('other');
            }

            var name = document.createElement('div');
            name.textContent = data.user;
            div.appendChild(name);

            if (data.chat) {
                var chat = document.createElement('div');
                chat.textContent = data.chat;
                div.appendChild(chat);
            } else {
                var gif = document.createElement('img');
                gif.src = '/gif/' + data.gif;
                div.appendChild(gif);
            }
            div.style.color = data.user;
            document.querySelector('#chat-list').appendChild(div);
        });

        document.querySelector('#chat-form').addEventListener('submit', (e) => {
            e.preventDefault();

            if(e.target.chat.value) {
                // [11.5 : Note_1)] 라우터를 거치지 않고 채팅 구현 (웹 소켓만으로 채팅 구현) START
                /*                
                socket.emit('chat', {
                    room: '#{room._id}',
                    user: '#{user}',
                    chat: e.target.chat.value,
                });

                e.target.chat.value = '';
                */
                // [11.5 : Note_1)] 라우터를 거치지 않고 채팅 구현 (웹 소켓만으로 채팅 구현) END

                // 기존, 라우터 거치며 채팅 구현.
                var xhr = new XMLHttpRequest();
                xhr.onload = () => {
                    if (xhr.status === 200) {
                        e.target.chat.value = '';
                    } else {
                        console.error(xhr.responseText);
                    }
                };
                xhr.open('POST', '/room/#{room._id}/chat');
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.send(JSON.stringify({
                    chat: this.chat.value,
                }));
            }
        });
        // [11.5 : 01.] (프론트에서는 서버에서 보내는 채팅 데이터를 받을 소켓 이벤트 리스너가 필요함) END


        // [11.6 : 01.] (GIF 이미지 전송 구현) START
        document.querySelector('#gif').addEventListener('change', (e) => {
            var formData = new FormData();
            var xhr = new XMLHttpRequest();
            console.log(e.target.files);
            formData.append('gif', e.target.files[0]);

            xhr.onload = () => {
                if (xhr.status === 200) {
                    e.target.file = null;
                } else {
                    console.error(xhr.responseText);
                }
            };

            xhr.open('POST', '/room/#{room._id}/gif');
            xhr.send(formData);
        });
        // [11.6 : 01.] (GIF 이미지 전송 구현) END


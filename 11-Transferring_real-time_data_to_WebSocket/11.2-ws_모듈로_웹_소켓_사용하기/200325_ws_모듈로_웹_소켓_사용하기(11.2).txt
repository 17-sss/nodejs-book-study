* ws 모듈로 웹 소켓 사용하기
    + 프로젝트 파일 작업 순서 및 메모
        1. gif-chat 프로젝트 생성
        2. /gif-chat/package.json       (생성)
            1) npm i
        3. /gif-chat/.env               (생성)
        4. /gif-chat/app.js             (생성)
            1) npm i ws
        5. /gif-chat/routes/index.js    (생성)
        6. /gif-chat/app.js             (수정)
        7. /gif-chat/socket.js          (생성)
            1) 익스프레스 (HTTP)와 웹 소켓(WS)은 같은 포트를 공유할 수 있으므로 
                별도의 작업이 필요하지 않음.
            2) 웹 소켓 서버에 이벤트 리스너를 붙여줌.
                - 웹 소켓은 이벤트 기반으로 작동. (실시간으로 데이터를 전달받으므로 항상 대기하고 있어야)
                - connection 이벤트는 클라이언트가 서버와 웹 소켓을 연결을 맺을 때 발생.
                - req.headers['x-forwarded-for'] || req.connection.remoteAddress
                    > 클라이언트의 IP를 알아내는 유명한 방법 중 하나.
            3) 익스프레스 서버와 연결한 후, 웹 소켓 객체(ws)에 이벤트 리스너.
                - message: 클라이언트로부터 메세지가 왔을 때 발생.
                - error: 웹 소켓 연결 중 문제가 생겼을 때 발생.
                - close: 클라이언트와 연결이 끊겼을 때 발생.
            4) 웹 소켓에는 4가지 상태가 있음.
                CONNECTING(연결 중)
                OPEN(열림)
                CLOSING(닫는 중)
                CLOSED(닫힘)
                - OPEN일 때만 에러 없이 메세지를 보낼 수 있음.
            5) close 이벤트에서 setInterval을 clearInterval로 정리하는 것도 기억하길.
                이 부분이 없다면 메모리 누수 발생.
        8. /gif-chat/views/index.pug    (생성)
            1). 웹 소켓은 단순히 서버에서 설정한다고 작동하는 것이 아니기에, 
                클라이언트에서도 웹 소켓을 사용해야 함. 양방향 통신이기에.